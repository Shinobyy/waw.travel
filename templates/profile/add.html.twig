{% extends 'base.html.twig' %}

{% block title %}Cr√©er un Road Trip{% endblock %}

{% block body %}
<div class="container mx-auto px-4 py-6">
    <h1 class="text-2xl font-bold mb-6">Nouveau Road Trip</h1>

    {{ form_start(form, {'attr': {'id': 'roadtrip-form', 'class': 'space-y-6'}}) }}
    
    <div class="form-group space-y-2">
        {{ form_label(form.title, null, {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
        {{ form_widget(form.title, {'attr': {'class': 'mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm'}}) }}
    </div>

    <div class="form-group space-y-2">
        {{ form_label(form.description, null, {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
        {{ form_widget(form.description, {'attr': {'class': 'mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm'}}) }}
    </div>

    <div class="form-group space-y-2">
        {{ form_label(form.cover_image, null, {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
        {{ form_widget(form.cover_image, {'attr': {'class': 'mt-1 block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100'}}) }}
    </div>

    <div class="form-group space-y-2">
        {{ form_label(form.vehicle, null, {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
        {{ form_widget(form.vehicle, {'attr': {'class': 'mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm'}}) }}
    </div>

    {# Conteneur pour les checkpoints #}
    <div id="checkpoints-container" 
        class="space-y-4" 
        data-prototype="{{ form_widget(form.checkpoints.vars.prototype)|e('html') }}">
        <h2 class="text-xl font-semibold mt-6">Checkpoints</h2>
        
        {# Liste des checkpoints existants #}
        <div class="checkpoints-list">
            {% for checkpoint in form.checkpoints %}
                <div class="checkpoint-item bg-gray-50 border border-gray-200 rounded-lg p-4 space-y-4">
    {{ form_row(checkpoint.name, {
        'label': 'Nom du lieu',
        'label_attr': {'class': 'block text-sm font-medium text-gray-700'},
        'attr': {'class': 'mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm'}
    }) }}
    
    <div class="form-group space-y-2">
        {{ form_label(checkpoint.google_maps_coordinates, null, {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
        <div class="map-container" style="height: 500px; width: 100%; margin-bottom: 10px;"></div>
        {{ form_widget(checkpoint.google_maps_coordinates, {
            'attr': {
                'class': 'mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm coordinates-input',
                'readonly': 'readonly'
            }
        }) }}
    </div>

    {{ form_row(checkpoint.arrival_date) }}
    {{ form_row(checkpoint.departure_date) }}
</div>
            {% endfor %}
        </div>
    </div>

    <button type="button" id="add-checkpoint" class="mt-6 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Ajouter un checkpoint</button>

    {{ form_row(form.submit, {'attr': {'class': 'mt-6 bg-green-500 text-white px-6 py-2 rounded hover:bg-green-600'}}) }}

    {{ form_end(form) }}
</div>

{% endblock %}

{% block javascripts %}
    <script>
(function() {
    let maps = new Map();

    function initializeCheckpoints() {
        const checkpointsContainer = document.querySelector('.checkpoints-list');
        const addCheckpointButton = document.getElementById('add-checkpoint');
        
        if (!checkpointsContainer || !addCheckpointButton) {
            console.error('Required elements not found');
            return;
        }

        document.querySelectorAll('.map-container').forEach((container, index) => {
            initializeMap(container, index);
        })

        let index = checkpointsContainer.children.length;

        addCheckpointButton.addEventListener('click', async function() {
            const protocolContainer = document.getElementById('checkpoints-container');
            if (!protocolContainer) {
                console.error('Checkpoints container not found');
                return;
            }

            const prototype = protocolContainer.dataset.prototype;
            if (!prototype) {
                console.error('Prototype data not found');
                return;
            }
            
            const newForm = prototype.replace(/__name__/g, index);
            
            const checkpointDiv = document.createElement('div');
            checkpointDiv.classList.add('checkpoint-item', 'bg-gray-50', 'border', 'border-gray-200', 'rounded-lg', 'p-4', 'space-y-4');
            checkpointDiv.innerHTML = newForm;

            checkpointsContainer.appendChild(checkpointDiv);
            
            // Wait for DOM update
            await new Promise(resolve => setTimeout(resolve, 0));
            
            // Initialize map for new checkpoint
            const mapContainer = checkpointDiv.querySelector('.map-container');
            if(mapContainer) {
                await initializeMap(mapContainer, index);
            }
            
            index++;
        });
    }

    async function initializeMap(container, index) {
        const { Map, Marker } = await google.maps.importLibrary("maps");
        const map = new Map(container, {
            center: { lat: 46.227638, lng: 2.213749 },
            zoom: 6
        });

        let marker = null;
        const coordInput = container.parentElement.querySelector('.coordinates-input');

        map.addListener('click', (e) => {
            const lat = e.latLng.lat();
            const lng = e.latLng.lng();

            if (marker) marker.setMap(null);
            
            marker = new Marker({
                position: e.latLng,
                map: map
            });

            if (coordInput) {
                coordInput.value = `${lat},${lng}`;
            }
        });

        maps.set(index, map);
        return map;
    }

    document.addEventListener('DOMContentLoaded', initializeCheckpoints);
})();
</script>

{{ parent() }}
<script>
  (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
    key: "AIzaSyA1SC4y43QhRkEtzuHnQ06IsTlQ1hAN1mk",
    v: "weekly",
  });
</script>
{% endblock %}